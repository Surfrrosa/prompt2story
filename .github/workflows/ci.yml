name: CI/CD Pipeline
on:
  push:
    branches: [ main, fix/vision-json-mode ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  api-tests:
    name: API Tests & Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript strict mode check (API)
        run: cd api && npx tsc --noEmit

      - name: Run API tests
        run: npm run test
        env:
          NODE_ENV: test
          OPENAI_API_KEY: test-key-for-ci

      - name: Generate API test coverage
        run: npm run test:coverage || true

      - name: Upload API coverage
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: coverage/
          retention-days: 30

  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: TypeScript check (Frontend)
        run: cd frontend && npm run typecheck

      - name: ESLint check
        run: cd frontend && npm run lint

      - name: Run frontend tests
        run: cd frontend && npm run test:run

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 30

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [api-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify security headers configuration
        run: |
          if grep -q "X-Content-Type-Options" vercel.json; then
            echo "✅ Security headers configured"
          else
            echo "❌ Security headers missing"
            exit 1
          fi

      - name: Check .env.example exists
        run: |
          if [ -f ".env.example" ]; then
            echo "✅ .env.example found"
          else
            echo "❌ .env.example missing"
            exit 1
          fi